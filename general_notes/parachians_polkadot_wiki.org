https://wiki.polkadot.network/docs/learn-parachains
* Definition

`A parachain is an application-specific data structure that is globally coherent and can be validated by the validators of the Relay Chain. They take their name from the concept of parallelized chains that run parallel to the Relay Chain`

`They inherit the security of the entire network and can communicate with other parachains through the XCM format.`

`Parachains are maintained by a network maintainer known as a collator. The role of the collator node is to maintain a full node of the parachain, retain all necessary information of the parachain, and produce new block candidates to pass to the Relay Chain validators for verification and inclusion in the shared state of Polkadot`

MEGA IMPORTANTE -> `The Polkadot Host requires that the state transitions performed on parachains be specified as a Wasm executable. Proofs of new state transitions that occur on a parachain must be validated against the registered state transition function (STF) that is stored on the Relay Chain by the validators before Polkadot acknowledges a state transition has occurred on a parachain. The key constraint regarding the logic of a parachain is that it must be verifiable by the Relay Chain validators. Verification most commonly takes the form of a bundled proof of a state transition known as a Proof-of-Verification (PoV) block, which is submitted to the validators from one or more of the parachain collators to be checked.`

* Protocol Overview

** Validators
`They are responsible for validating the proposed parachain's blocks by checking the Proof-of-Validity (PoV) of the blocks and ensuring the PoV remains available for a designated period. They have "skin in the game", meaning they have funds bonded on-chain that can be partially or fully confiscated by the network in case of misbehavior.`

** Collators
`They create the PoV that validators know how to check. Creating PoV requires familiarity with transaction format and block authoring rules of a specific parachain, as well as having access to its full state.`

** Procol Summary
`
The parachains' protocol can be summarized into three main steps:

1. Collators send the parachain block (parablock) with PoV to the set of Validators assigned to the parachain (i.e. para-validators).
2. Validators verify if the parablock follows the state transition rules of the parachain and sign statements that can have a positive or negative outcome.
3. With enough positive statements, the block is added to the Relay Chain.
`

`Signed negative statements will lead to a dispute, and if there are false negatives, whoever will be on the wrong side (once the dispute is resolved) will be slashed. False positives can also happen; those actors responsible for it will also be slashed. To detect false positives, PoV information must be available after the block has been added to the Relay Chain so that validators can check the work. PoVs are typically between 1 MB and 10 MB in size and are not included in the Relay Chain blocks. However, as a part of the data availability scheme, they are made available on the network for a certain period so that the validators can perform the required checks.`

** Inclusion Pipeline
name of the path of a parachain block

1. `Validators are assigned to parachains by the Validator Assignment routine.`
2. collators produce: parablock + PoV
3. `The collator forwards the candidate and PoV to validators assigned to the same parachain via the Collator Distribution subsystem.`
4. `The validators assigned to the parachain participate in the Candidate Backing subsystem. Candidates that gather enough signed validity statements are considered "backable" and their backing is the set of signed statements.`
5. `A relay chain block author (selected by BABE) can note up to 1 backable candidate for each parachain to be included in the Relay Chain block alongside its backing. Once included in the Relay Chain the candidate is considered backable in that fork of the Relay Chain.` ->
6. `Once backable in the Relay Chain, the candidate is considered to be in "pending availability" status. It can only be considered a part of the parachain once it is proven available.`
7. `In the following relay chain blocks, the validators will participate in the Availability Distribution subsystem to ensure availability of the candidate. The subsequent relay chain blocks will note information regarding the candidate's availability.`
8. Once the relay chain state machine has enough information to consider the candidate's PoV as being available, the candidate is considered part of the parachain and is graduated to being a full parachain block.

PROBLEM -> A BACKED BLOCK IS ALREADY A BUNCK OF PARABLOCKS? -> YES, in step 5 there is a specific BABE authore that gather 1 candidate for each parachain

SO: multiple 'backable' blocks (parachain blocks) produce a single relaychain backed block , and now needs to wait for the pending avaiability


RESUME: Collatrs => set of validators (NPoS) => backing of the blocks (wait for validator signatures) => BABE blockauthor produce a block containing the blocks => *pending availability* (some magical stuff around the sharing of the PoV) => once the block is considered available than it is part fo the REALY CHAIN BUT needs to go towards the approval process

`Once the parablock is considered available and part of the parachain, it is still "pending approval". The Inclusion Pipeline must conclude for a specific parachain before a new block can be accepted on that parachain -> `After inclusion, the Approval Process starts, and it can run for many parachain blocks at once.`


`
The candidate can fail to be included in the parachain in any of the following ways:
    The collator is not able to propagate the block to any of the assigned validators.
    The candidate is not backed by validators participating to the Candidate Backing subsystem.
    The candidate is not selected by a relay chain block author.
    The candidate's PoV is not considered available within a timeout, and it is discarded from the Relay Chain.
`

** Approval Process
`Once the parablock is considered available and part of the parachain, is still "pending approval".`

THe approval procces is made to avoid that the set of validator assigned to the parachain disallow on what was said

`As a parablock can accept children blocks after being considered available, failure to pass the approval process will invalidate the parablock as well as its descendants (children blocks). Only the validators who backed the block in question will be slashed, not those who backed the descendants.`

*** Approval pipeline:
1. `Parablocks that have been included by the Inclusion Pipeline are pending approval for a time window known as the *secondary checking window.*`
2. `During the secondary checking window, validators (secondary checkers) randomly self-select to perform secondary checks on each of the parablock.`
3. `Secondary checkers acquire the parablock with PoV and re-run the validation function.`
4. `Secondary checkers gossip the results of their checks. Contradictory results lead to escalation in which all validators are required to check the block. The validators on the losing side will be slashed.`
5. `At the end of the process the parablock is either approved or rejected.`

** Networking Asynchrony
`It is possible that due to network asynchrony two forks may grow in parallel for some time, but eventually one fork will be chosen by the finality gadget. In the absence of an adversarial network it is unlikely that two forks will coexist for some time as there will be validators aware of both chain heads.`

* Availability and Validity
`The Availability and Validity (AnV) protocol of Polkadot allows the network to be efficiently sharded among parachains while maintaining strong security guarantees.`

** Phases
*** Parachain Phase
`The parachain phase of AnV is when the collator of a parachain proposes a candidate block to the validators that are currently assigned to the parachain.`
*** RelayChain submission phase
`The validators then check the candidate block against the verification function exposed by that parachain's registered code. If the verification succeeds, then the validators will pass the candidate block to the other validators in the gossip network`

not every validator execute each parachain block BUT a sub set is elected to check the block produced by the assigned parachain, this is only a first pass though (random checks happen also after) ...

` -> here I'm not sure, this agreement seems to be done AFTER the BABE author create a new block but not sure because 50% OF WHAT? based on what's describe later this seems to refer to the 50% of the sub set of validators assigned to the parachains
When more than half of the parachain validators agree that a particular parachain block candidate is a valid state transition, they prepare a candidate receipt. The candidate receipt is what will eventually be included into the Relay Chain state. It includes:
    The parachain ID.
    The collator's ID and signature.
    A hash of the parent block's candidate receipt.
    A Merkle root of the block's erasure-coded pieces.
    A Merkle root of any outgoing messages.
    A hash of the block.
    The state root of the parachain before block execution.
    The state root of the parachain after block execution.
`

those info -> constant size
BUT the PoV is NOT constant size, the size is variable
*** Availability and unavailability subprotocols
During this phases the nodes gossip the 'ereusure coded' stuff

`At least 2/3 + 1 validators must report that they possess their piece of the code word. Once this threshold of validators has been reached, the network can consider the PoV block of the parachain available.`
*** Secondary GRANDPA approval validity checks
*** Invocation of a Byzantine fault tolerant finality gadget to cement the chain.

** Erausure coding
`Erasure coding transforms a message into a longer code that allows for the original message to be recovered from a subset of the code and in absence of some portion of the code`

Reed-Salomon is used (battle tested ereausure code)

why? to keep the state always avaible BUT with the assumption that noone has to store everything
`validators share smaller pieces of the data and can later reconstruct the entire data under the assumption that 1/3+1 of the validators can provide their pieces of the data.`
** Fisherman -> Deprecated
* Systems Parachain
Just relay chain logic that lives inside parachain to keep more free the relay chain block space and let che chains implement more specific and afficient solutions to custom problems
