* General Info
`Description of the expected environment available for import by the Polkadot Runtime`
* Preliminares
`The Polkadot Host API is a set of functions that the Polkadot Host exposes to Runtime to access external functions needed for various reasons, such as the Storage of the content, access and manipulation, memory allocation, and also efficiency`

`If the encoding is not mentioned, then the default Wasm encoding is used, such as little-endian byte ordering for integers.`


** Exposed Host API
** Runtime Pointer
`unsigned 32-bit integer representing a pointer to data in memory` (linear memory I think)
** Runtime Pointer Size
`unsigned 64-bit integer, representing two consecutive integers. The least significant is Runtime pointer (Definition 202). The most significant provides the size of the data in bytes.`

`This representation is the primary way to exchange data of arbitrary/dynamic sizes between the Runtime and the Polkadot Host.`
** Lexicographic ordering

* Storage
`Interface for accessing the storage from within the runtime.`

* Child Storage
`Interface for accessing the child storage from within the runtime.`

* Crypto
`Interfaces for working with crypto related types from within the runtime.`

* Hashing
`Interface that provides functions for hashing with different algorithms.`

* Offchain
`The Offchain Workers allow the execution of long-running and possibly non-deterministic tasks which could otherwise require longer than the block execution time. Offchain Workers have their own execution environment. This separation of concerns is to make sure that the block production is not impacted by the long-running tasks.`

`All data and results generated by Offchain workers are unique per node and nondeterministic. Information can be propagated to other nodes by submitting a transaction that should be included in the next block. As Offchain workers runs on their own execution environment they have access to their own separate storage`

* Trie
`Interface that provides trie related functionality.`

functionality like eval trie root and other crypto stuff on the trie

* Miscellaneous
mainly print stuff (int, utf8 formatted string and hex) and get runtime version call (mainly used in the upgrade runtime function)

* Allocator
`The Polkadot Runtime does not include a memory allocator and relies on the Host API for all heap allocations. The beginning of this heap is marked by the __heap_base symbol exported by the Polkadot Runtime. No memory should be allocated below that address, to avoid clashes with the stack and data section. The same allocator made accessible by this Host API should be used for any other WASM memory allocations and deallocations outside the runtime e.g. when passing the SCALE-encoded parameters to Runtime API calls.`

only two functions:
** malloc
** free

* logging
`Interface that provides functions for logging from within the runtime.`

* Abort Handler
`Interface for aborting the execution of the runtime.`
IMPORTANT becuase wasm can throw a TRAP if something goes wrong
